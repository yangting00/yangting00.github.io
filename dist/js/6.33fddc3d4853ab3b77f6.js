webpackJsonp([6],{347:function(i,s){i.exports='<hr>\n<p>createTime : 2017/06/28<br>author : linwei0201<br>title : git配置及命令介绍</p>\n<h2 id="subtitle-git-mac-bash-">subtitle: 列出git常用命令及mac bash中便捷配置</h2>\n<h3 id="-shell-git-">一、设置Shell中Git的颜色和当前所在分支</h3>\n<h4 id="1-cd-">1. cd ~</h4>\n<h4 id="2-vi-bashrc">2. vi .bashrc</h4>\n<h4 id="3-">3. 设置文件内容如下，并保存</h4>\n<figure class="highlight"><table><tr><td class="code"><pre><div class="line">function parse_git_dirty {</div><div class="line">    local git_status=$(git status 2&gt; /dev/null | tail -n1) || $(git status 2&gt; /dev/null | head -n 2 | tail -n1);</div><div class="line">    if [[ "$git_status" != "" ]]; then</div><div class="line">        local git_now; # 标示</div><div class="line">        if [[ "$git_status" =~ nothing\\ to\\ commit || "$git_status" =~  Your\\ branch\\ is\\ up\\-to\\-date\\ with ]]; then</div><div class="line">            git_now="=";</div><div class="line">        elif [[ "$git_status" =~ Changes\\ not\\ staged || "$git_status" =~ no\\ changes\\ added ]]; then</div><div class="line">            git_now=\'~\';</div><div class="line">        elif [[ "$git_status" =~ Changes\\ to\\ be\\ committed ]]; then #Changes to be committed</div><div class="line">            git_now=\'*\';</div><div class="line">        elif [[ "$git_status" =~ Untracked\\ files ]]; then</div><div class="line">            git_now="+";</div><div class="line">        elif [[ "$git_status" =~ Your\\ branch\\ is\\ ahead ]]; then</div><div class="line">            git_now="#";</div><div class="line">        fi</div><div class="line">        echo "${git_now}";</div><div class="line">    fi</div><div class="line">}</div><div class="line"></div><div class="line">function git_branch {</div><div class="line">    ref=$(git symbolic-ref HEAD 2&gt; /dev/null) || return;</div><div class="line">    echo "("${ref#refs/heads/}") ";</div><div class="line">}</div><div class="line"></div><div class="line">PS1="[\\[\\033[1;32m\\]\\w\\[\\033[0m\\]] \\[\\033[0m\\]\\[\\033[1;36m\\]\\$(git_branch)\\[\\033[0;31m\\]\\$(parse_git_dirty)\\[\\033[0m\\]$ "</div></pre></td></tr></table></figure><h4 id="4-source-bashrc">4. 执行 source ./.bashrc</h4>\n<h4 id="5-mac-">5. 如果是mac，再执行如下命令,每次开机才会自动生效</h4>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"[ -r ~/.bashrc ] &amp;&amp; source ~/.bashrc"</span> &gt;&gt; .bash_profile</div></pre></td></tr></table></figure><h3 id="-git-">二、设置Git常用别名</h3>\n<blockquote>\n<p>1./etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。</p>\n<p>2.~/.gitconfig 文件 ：具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。</p>\n<p>3.位于git目录的config文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。</p>\n</blockquote>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">alias</span>]</div><div class="line">  s = status</div><div class="line">  st = status</div><div class="line">  sb = status -s -b</div><div class="line">  <span class="comment">#############</span></div><div class="line">  d = diff</div><div class="line">  di = diff</div><div class="line">  dc = diff --cached</div><div class="line">  dk = diff --check</div><div class="line">  dck = diff --cached --check</div><div class="line">  <span class="comment">#############</span></div><div class="line">  c = commit</div><div class="line">  ca = commit -a</div><div class="line">  cm = commit -m</div><div class="line">  ci = commit</div><div class="line">  <span class="comment">#############</span></div><div class="line">  l = <span class="built_in">log</span> --oneline</div><div class="line">  lg = <span class="built_in">log</span> --oneline --graph --decorate</div><div class="line">  <span class="comment">#############</span></div><div class="line">  o = checkout</div><div class="line">  co = checkout</div><div class="line">  ob = checkout -b</div><div class="line">  cob = checkout -b</div><div class="line">  <span class="comment">#############</span></div><div class="line">  b = branch</div><div class="line">  bv = branch -vv</div><div class="line">  ba = branch -a</div><div class="line">  bd = branch -d</div><div class="line">  br = branch -r</div><div class="line">  <span class="comment">#############</span></div><div class="line">  f = fetch</div><div class="line">  fo = fetch origin</div><div class="line">  <span class="comment">#############</span></div><div class="line">  m = merge</div><div class="line">  <span class="comment">#############</span></div><div class="line">  ps = push</div><div class="line">  pl = pull</div><div class="line">  pb = pull --rebase</div><div class="line">  psf = push -f</div><div class="line">  psu = push -u</div><div class="line">  plu = pull -u</div><div class="line">  pso = push origin</div><div class="line">  plo = pull origin</div><div class="line">  pbo = pull --rebase origin</div><div class="line">  psfo = push -f origin</div><div class="line">  psuo = push -u origin</div><div class="line">  pluo = pull -u origin</div><div class="line">  <span class="comment">#############</span></div><div class="line">  rb = rebase</div><div class="line">  <span class="comment">#############</span></div><div class="line">  re = reset</div><div class="line">  rh = reset HEAD</div><div class="line">  reh = reset --hard</div><div class="line">  rem = reset --mixed</div><div class="line">  res = reset --soft</div><div class="line">  rehh = reset --hard HEAD</div><div class="line">  remh = reset --mixed HEAD</div><div class="line">  resh = reset --soft HEAD</div><div class="line">  <span class="comment">#############</span></div><div class="line">  w = show</div><div class="line">  <span class="comment">#############</span></div></pre></td></tr></table></figure><h3 id="-">三、常用命令介绍</h3>\n<h4 id="-">撤销系列</h4>\n<h5 id="untracked-">untracked撤销</h5>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">rm -rf [path]</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 删除 untracked files</span></div><div class="line">git clean -f</div><div class="line"></div><div class="line"><span class="comment"># 连 untracked 的目录也一起删掉</span></div><div class="line">git clean -fd</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git checkout --ours [path]</div></pre></td></tr></table></figure><h5 id="add-">add撤销</h5>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git reset HEAD [file-name]</div></pre></td></tr></table></figure><h5 id="commit-">commit撤销</h5>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git reset —soft [commit-id]</div></pre></td></tr></table></figure><h5 id="-commit-">增补提交（不会产生新的commit）</h5>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git commit -C HEAD -a --amend</div><div class="line"></div><div class="line">参数说明</div><div class="line">-m “提交的说明”</div><div class="line">-a 动把所有已经跟踪过的文件暂存,并提交.(工作目录中修改过的文件都提交到版本库，不需一个一个手动add了)</div><div class="line">–amend 增补提交</div><div class="line">-C 复用指定提交的提交留言</div><div class="line">-c 打开编辑器在已有的提交基础上编辑修改</div></pre></td></tr></table></figure><h4 id="stash-">stash系列</h4>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git stash list</div><div class="line">git stash</div><div class="line">git stash show xxx</div><div class="line">git stash drop xxx</div><div class="line">git stash pop</div></pre></td></tr></table></figure><h4 id="push-pull-">push和pull分支默认匹配</h4>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git config --global push.default matching</div><div class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/master master</div></pre></td></tr></table></figure><p>或在.git/config中配置</p>\n<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[branch <span class="string">"test_20170209"</span>]</div><div class="line">remote = origin</div><div class="line">merge = refs/heads/test_20170209</div></pre></td></tr></table></figure><h4 id="gitignore-">gitignore不起作用解决办法</h4>\n<blockquote>\n<p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</p>\n</blockquote>\n<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git add .</div><div class="line">git commit -m &apos;update .gitignore&apos;</div></pre></td></tr></table></figure>'}});